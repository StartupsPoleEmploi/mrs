include:
  - local: '/templates/build-docker-image-template.yml'

variables:
  GIT_SSL_NO_VERIFY: "1"
  SBT_OPTS: "-Dsbt.ivy.home=/cache/.ivy2 -Dsbt.boot.credentials=/root/.ivy2/.credentials -Xms512M -Xss2M -Xmx2G"

image: "registry.beta.pole-emploi.fr/perspectives/perspectives/perspectives-ci-base-image:latest"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - "webapp/ui/node_modules/"
    - "/cache/.ivy2"
    - "/cache/target"
    - "/root/.sbt"

stages:
  - 🔨_build
  - 🚀_release
  - 📦_package
  - 🐳_docker
#  - 🚚_deploy # uncomment when jobs to deploy docker images on recette / env will be available

# job automatique qui compile et lance les tests sur toutes les branches
🔨_build:
  stage: 🔨_build
  script:
    # Build la partie front (les node_modules sont mis en cache pour pas tout retelecharger a chaque fois)
    - cd webapp/ui
    - npm install
    - cd ../..
    - sbt ";clean;compile;test"
  cache:
    paths:
      - ./.m2/repository
    key: m2
  except:
    refs:
      - tags
      - docker-ci-base-image
    variables:
      - $CI_COMMIT_MESSAGE =~ /ci-skip/ # do not run job if commit message contains "ci-skip"

# job manuel qui release une version sur la branche master
🚀_release:
  stage: 🚀_release
  script:
    # On remplace le CI_JOB_TOKEN par un CI_CUSTOM_JOB_TOKEN qui possede le droit de push sur le repo (personal access token defini dans les gitlab secret variables)
    - url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${CI_CUSTOM_JOB_TOKEN}@${url_host}"
    # Conf git pour pusher lors de la release
    - git config --global user.email "perspectives@pole-emploi.fr"
    - git config --global user.name "Perspectives CI"
    # gitlab CI bosse en mode detache sur un commit alors que la release a besoin de se faire sur une branche pour pusher les changements de versions dans gitlab
    - git checkout $CI_COMMIT_REF_NAME
    - git reset --hard origin/$CI_COMMIT_REF_NAME
    # Build la partie front (les node_modules sont mis en cache pour pas tout retelecharger a chaque fois)
    - cd webapp/ui
    - npm install
    - cd ../..
    # Release
    - sbt "release with-defaults"
  cache:
    paths:
      - ./.m2/repository
    key: m2
  when: manual
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /ci-skip/ # do not run job if commit message contains "ci-skip"
  only:
    - master

# job automatique qui package l'application en zip apres chaque release sur le nouveau tag cree
📦_package:
  stage: 📦_package
  before_script:
    # Build la partie front (les node_modules sont mis en cache pour pas tout retelecharger a chaque fois)
    - cd webapp/ui
    - npm install
    - cd ../..
  script:
    - sbt dist
  cache:
    paths:
      - ./.m2/repository
    key: m2
  artifacts:
    paths:
      - ./**/target/universal/*.zip
    expire_in: 1 week
  only:
    - tags
    - recette

# job qui permet de builder l'image docker de la webapp
🐳_build-docker-image-webapp:
  extends: .build-docker-image
  variables:
    LOGBACK_RESOURCE: logback-production.xml
    CONFIG_RESOURCE: application-production.conf
    PROJECT: webapp
    ENV_NAME_LOGBACK_RESOURCE: WEBAPP_LOGBACK_RESOURCE
    ENV_NAME_CONFIG_RESOURCE: WEBAPP_CONFIG_RESOURCE

# job qui permet de builder l'image docker des batchs
🐳_build-docker-image-batchs:
  extends: .build-docker-image
  variables:
    LOGBACK_RESOURCE: logback-production.xml
    CONFIG_RESOURCE: application-production.conf
    PROJECT: batchs
    ENV_NAME_LOGBACK_RESOURCE: BATCHS_LOGBACK_RESOURCE
    ENV_NAME_CONFIG_RESOURCE: BATCHS_CONFIG_RESOURCE

# job qui permet de builder l'image docker de la webapp pour la recette (SNAPSHOT)
🐳_build-r7-docker-image-webapp:
  extends: .build-docker-image
  variables:
    LOGBACK_RESOURCE: logback-recette.xml
    CONFIG_RESOURCE: application-recette.conf
    PROJECT: webapp
    ENV_NAME_LOGBACK_RESOURCE: WEBAPP_LOGBACK_RESOURCE
    ENV_NAME_CONFIG_RESOURCE: WEBAPP_CONFIG_RESOURCE
  only:
    - recette

# job qui permet de builder l'image docker des batchs pour la recette (SNAPSHOT)
🐳_build-r7-docker-image-batchs:
  extends: .build-docker-image
  variables:
    LOGBACK_RESOURCE: logback-recette.xml
    CONFIG_RESOURCE: application-recette.conf
    PROJECT: batchs
    ENV_NAME_LOGBACK_RESOURCE: BATCHS_LOGBACK_RESOURCE
    ENV_NAME_CONFIG_RESOURCE: BATCHS_CONFIG_RESOURCE
  only:
    - recette

# job manuel qui permet de builder l'image docker qui sert de base aux autres jobs Gitlab CI (pour pas reinstaller tous les outils a chaque job...)
🐳_build-ci-base-image:
  stage: 🐳_docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - cd docker
    - /kaniko/executor --context $CI_PROJECT_DIR/docker --dockerfile $CI_PROJECT_DIR/docker/dockerfile-ci-base-image --destination $CI_REGISTRY_IMAGE/perspectives-ci-base-image:latest
  only:
    - docker-ci-base-image
